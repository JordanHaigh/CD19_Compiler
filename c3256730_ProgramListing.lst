1: /-- d) several that you expect to run successfully when later compiled by your compiler (and also part 3).
2: /-- These should include at least one that has function(s)/procedure(s) using all three methods of parameter passing that are allowed in CD19.
3: /-- the three type are simple variable passing(pass by value), array descriptor copy and const array passing
4: 
5: 
6: 
7: CD19 multiple_adding_program_with_arrays_and_stuff
8: constants
9: 	LENGTH = 20
10: 
11: types
12: 	number is
13: 		no : integer
14: 	end
15: 
16: numbers is array [LENGTH] of number
17: 
18: arrays
19: 	array1 : numbers,
20: 	array2 : numbers
21: 
22: /--  populates parameter array with multiples of the parameter integer
23: function populateArrayWithMultiples(a1: numbers, no: integer):void
24:   counter: integer
25:   begin
26:     	for(counter = 0; counter < LENGTH)/-- iterate through array
27:         a1[counter].no = no*(counter+1);/-- populate array
28:         counter +=1;
29:       end
30:       return;
31:   end
32: 
33: 
34: /-- adds the second parameter array into the first
35: function addArrays(a1 : numbers, const a2 : numbers): void
36: 	counter: integer
37: 	begin
38: 		for(counter = 0; counter < LENGTH)
39: 			array1[counter].no += array2[counter].no;
40: 			counter+=1;
41: 		end
42: 		return;
43: 	end
44: 
45: main
46:     i : integer,
47:     x : integer,
48:     y : integer
49: 
50: begin
51: 
52:   /-- populates 2 arrays
53:   x = 5;
54:   y = 12;
55:   populateArrayWithMultiples(array1, x);
56:   populateArrayWithMultiples(array2, y);
57: 
58:   /-- adds all numbers in array2 to array1
59:   addArrays(array1,array2);
60: 
61:   /-- prints the result
62: 	for(i = 0; i < LENGTH)
63:     printline array1[i].no;
64: 		i+=1;
65: 	end
66: end
67: CD19 multiple_adding_program_with_arrays_and_stuff
